// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SREOPSK8S/kubernetes-webhook-auth-wecom/ent/casbinrule"
	"github.com/SREOPSK8S/kubernetes-webhook-auth-wecom/ent/predicate"
)

// CasBinRuleUpdate is the builder for updating CasBinRule entities.
type CasBinRuleUpdate struct {
	config
	hooks    []Hook
	mutation *CasBinRuleMutation
}

// Where appends a list predicates to the CasBinRuleUpdate builder.
func (cbru *CasBinRuleUpdate) Where(ps ...predicate.CasBinRule) *CasBinRuleUpdate {
	cbru.mutation.Where(ps...)
	return cbru
}

// SetPtype sets the "Ptype" field.
func (cbru *CasBinRuleUpdate) SetPtype(s string) *CasBinRuleUpdate {
	cbru.mutation.SetPtype(s)
	return cbru
}

// SetNillablePtype sets the "Ptype" field if the given value is not nil.
func (cbru *CasBinRuleUpdate) SetNillablePtype(s *string) *CasBinRuleUpdate {
	if s != nil {
		cbru.SetPtype(*s)
	}
	return cbru
}

// SetV0 sets the "V0" field.
func (cbru *CasBinRuleUpdate) SetV0(s string) *CasBinRuleUpdate {
	cbru.mutation.SetV0(s)
	return cbru
}

// SetNillableV0 sets the "V0" field if the given value is not nil.
func (cbru *CasBinRuleUpdate) SetNillableV0(s *string) *CasBinRuleUpdate {
	if s != nil {
		cbru.SetV0(*s)
	}
	return cbru
}

// SetV1 sets the "V1" field.
func (cbru *CasBinRuleUpdate) SetV1(s string) *CasBinRuleUpdate {
	cbru.mutation.SetV1(s)
	return cbru
}

// SetNillableV1 sets the "V1" field if the given value is not nil.
func (cbru *CasBinRuleUpdate) SetNillableV1(s *string) *CasBinRuleUpdate {
	if s != nil {
		cbru.SetV1(*s)
	}
	return cbru
}

// SetV2 sets the "V2" field.
func (cbru *CasBinRuleUpdate) SetV2(s string) *CasBinRuleUpdate {
	cbru.mutation.SetV2(s)
	return cbru
}

// SetNillableV2 sets the "V2" field if the given value is not nil.
func (cbru *CasBinRuleUpdate) SetNillableV2(s *string) *CasBinRuleUpdate {
	if s != nil {
		cbru.SetV2(*s)
	}
	return cbru
}

// SetV3 sets the "V3" field.
func (cbru *CasBinRuleUpdate) SetV3(s string) *CasBinRuleUpdate {
	cbru.mutation.SetV3(s)
	return cbru
}

// SetNillableV3 sets the "V3" field if the given value is not nil.
func (cbru *CasBinRuleUpdate) SetNillableV3(s *string) *CasBinRuleUpdate {
	if s != nil {
		cbru.SetV3(*s)
	}
	return cbru
}

// SetV4 sets the "V4" field.
func (cbru *CasBinRuleUpdate) SetV4(s string) *CasBinRuleUpdate {
	cbru.mutation.SetV4(s)
	return cbru
}

// SetNillableV4 sets the "V4" field if the given value is not nil.
func (cbru *CasBinRuleUpdate) SetNillableV4(s *string) *CasBinRuleUpdate {
	if s != nil {
		cbru.SetV4(*s)
	}
	return cbru
}

// SetV5 sets the "V5" field.
func (cbru *CasBinRuleUpdate) SetV5(s string) *CasBinRuleUpdate {
	cbru.mutation.SetV5(s)
	return cbru
}

// SetNillableV5 sets the "V5" field if the given value is not nil.
func (cbru *CasBinRuleUpdate) SetNillableV5(s *string) *CasBinRuleUpdate {
	if s != nil {
		cbru.SetV5(*s)
	}
	return cbru
}

// Mutation returns the CasBinRuleMutation object of the builder.
func (cbru *CasBinRuleUpdate) Mutation() *CasBinRuleMutation {
	return cbru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cbru *CasBinRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cbru.hooks) == 0 {
		affected, err = cbru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CasBinRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cbru.mutation = mutation
			affected, err = cbru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cbru.hooks) - 1; i >= 0; i-- {
			if cbru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cbru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cbru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cbru *CasBinRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := cbru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbru *CasBinRuleUpdate) Exec(ctx context.Context) error {
	_, err := cbru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbru *CasBinRuleUpdate) ExecX(ctx context.Context) {
	if err := cbru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cbru *CasBinRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   casbinrule.Table,
			Columns: casbinrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: casbinrule.FieldID,
			},
		},
	}
	if ps := cbru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbru.mutation.Ptype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldPtype,
		})
	}
	if value, ok := cbru.mutation.V0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV0,
		})
	}
	if value, ok := cbru.mutation.V1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV1,
		})
	}
	if value, ok := cbru.mutation.V2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV2,
		})
	}
	if value, ok := cbru.mutation.V3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV3,
		})
	}
	if value, ok := cbru.mutation.V4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV4,
		})
	}
	if value, ok := cbru.mutation.V5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV5,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CasBinRuleUpdateOne is the builder for updating a single CasBinRule entity.
type CasBinRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CasBinRuleMutation
}

// SetPtype sets the "Ptype" field.
func (cbruo *CasBinRuleUpdateOne) SetPtype(s string) *CasBinRuleUpdateOne {
	cbruo.mutation.SetPtype(s)
	return cbruo
}

// SetNillablePtype sets the "Ptype" field if the given value is not nil.
func (cbruo *CasBinRuleUpdateOne) SetNillablePtype(s *string) *CasBinRuleUpdateOne {
	if s != nil {
		cbruo.SetPtype(*s)
	}
	return cbruo
}

// SetV0 sets the "V0" field.
func (cbruo *CasBinRuleUpdateOne) SetV0(s string) *CasBinRuleUpdateOne {
	cbruo.mutation.SetV0(s)
	return cbruo
}

// SetNillableV0 sets the "V0" field if the given value is not nil.
func (cbruo *CasBinRuleUpdateOne) SetNillableV0(s *string) *CasBinRuleUpdateOne {
	if s != nil {
		cbruo.SetV0(*s)
	}
	return cbruo
}

// SetV1 sets the "V1" field.
func (cbruo *CasBinRuleUpdateOne) SetV1(s string) *CasBinRuleUpdateOne {
	cbruo.mutation.SetV1(s)
	return cbruo
}

// SetNillableV1 sets the "V1" field if the given value is not nil.
func (cbruo *CasBinRuleUpdateOne) SetNillableV1(s *string) *CasBinRuleUpdateOne {
	if s != nil {
		cbruo.SetV1(*s)
	}
	return cbruo
}

// SetV2 sets the "V2" field.
func (cbruo *CasBinRuleUpdateOne) SetV2(s string) *CasBinRuleUpdateOne {
	cbruo.mutation.SetV2(s)
	return cbruo
}

// SetNillableV2 sets the "V2" field if the given value is not nil.
func (cbruo *CasBinRuleUpdateOne) SetNillableV2(s *string) *CasBinRuleUpdateOne {
	if s != nil {
		cbruo.SetV2(*s)
	}
	return cbruo
}

// SetV3 sets the "V3" field.
func (cbruo *CasBinRuleUpdateOne) SetV3(s string) *CasBinRuleUpdateOne {
	cbruo.mutation.SetV3(s)
	return cbruo
}

// SetNillableV3 sets the "V3" field if the given value is not nil.
func (cbruo *CasBinRuleUpdateOne) SetNillableV3(s *string) *CasBinRuleUpdateOne {
	if s != nil {
		cbruo.SetV3(*s)
	}
	return cbruo
}

// SetV4 sets the "V4" field.
func (cbruo *CasBinRuleUpdateOne) SetV4(s string) *CasBinRuleUpdateOne {
	cbruo.mutation.SetV4(s)
	return cbruo
}

// SetNillableV4 sets the "V4" field if the given value is not nil.
func (cbruo *CasBinRuleUpdateOne) SetNillableV4(s *string) *CasBinRuleUpdateOne {
	if s != nil {
		cbruo.SetV4(*s)
	}
	return cbruo
}

// SetV5 sets the "V5" field.
func (cbruo *CasBinRuleUpdateOne) SetV5(s string) *CasBinRuleUpdateOne {
	cbruo.mutation.SetV5(s)
	return cbruo
}

// SetNillableV5 sets the "V5" field if the given value is not nil.
func (cbruo *CasBinRuleUpdateOne) SetNillableV5(s *string) *CasBinRuleUpdateOne {
	if s != nil {
		cbruo.SetV5(*s)
	}
	return cbruo
}

// Mutation returns the CasBinRuleMutation object of the builder.
func (cbruo *CasBinRuleUpdateOne) Mutation() *CasBinRuleMutation {
	return cbruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cbruo *CasBinRuleUpdateOne) Select(field string, fields ...string) *CasBinRuleUpdateOne {
	cbruo.fields = append([]string{field}, fields...)
	return cbruo
}

// Save executes the query and returns the updated CasBinRule entity.
func (cbruo *CasBinRuleUpdateOne) Save(ctx context.Context) (*CasBinRule, error) {
	var (
		err  error
		node *CasBinRule
	)
	if len(cbruo.hooks) == 0 {
		node, err = cbruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CasBinRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cbruo.mutation = mutation
			node, err = cbruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cbruo.hooks) - 1; i >= 0; i-- {
			if cbruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cbruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cbruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cbruo *CasBinRuleUpdateOne) SaveX(ctx context.Context) *CasBinRule {
	node, err := cbruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cbruo *CasBinRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := cbruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbruo *CasBinRuleUpdateOne) ExecX(ctx context.Context) {
	if err := cbruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cbruo *CasBinRuleUpdateOne) sqlSave(ctx context.Context) (_node *CasBinRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   casbinrule.Table,
			Columns: casbinrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: casbinrule.FieldID,
			},
		},
	}
	id, ok := cbruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CasBinRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cbruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, casbinrule.FieldID)
		for _, f := range fields {
			if !casbinrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != casbinrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cbruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbruo.mutation.Ptype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldPtype,
		})
	}
	if value, ok := cbruo.mutation.V0(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV0,
		})
	}
	if value, ok := cbruo.mutation.V1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV1,
		})
	}
	if value, ok := cbruo.mutation.V2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV2,
		})
	}
	if value, ok := cbruo.mutation.V3(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV3,
		})
	}
	if value, ok := cbruo.mutation.V4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV4,
		})
	}
	if value, ok := cbruo.mutation.V5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: casbinrule.FieldV5,
		})
	}
	_node = &CasBinRule{config: cbruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cbruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
